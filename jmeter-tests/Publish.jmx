<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Publish">
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="api_base_url" elementType="Argument">
            <stringProp name="Argument.name">api_base_url</stringProp>
            <stringProp name="Argument.value">${__P(api_base_url,uatv2-backend.dev.aioapp.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="x-tenant-id" elementType="Argument">
            <stringProp name="Argument.name">x-tenant-id</stringProp>
            <stringProp name="Argument.value">${__P(x_tenant_id,3401)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="x-app-name" elementType="Argument">
            <stringProp name="Argument.name">x-app-name</stringProp>
            <stringProp name="Argument.value">${__P(x_app_name,dashboard)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <!-- Login Thread Group -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login Once">
        <stringProp name="ThreadGroup.num_threads">${__P(login_threads,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(login_rampup,1)}</stringProp>
        <stringProp name="ThreadGroup.duration">${__P(login_duration,900)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(login_delay,0)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController">
          <stringProp name="LoopController.loops">${__P(login_loops,-1)}</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <!-- Login HTTP Request -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Login">
          <stringProp name="HTTPSampler.domain">${api_base_url}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">api/authentication/user-login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <stringProp name="Argument.value">{
  "username": "${__P(login_username,ahmed.saeed+uatt@aioapp.com)}",
  "password": "${__P(login_password,AIO15@uat)}"
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager>
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor testname="Extract Access Token">
            <stringProp name="JSONPostProcessor.referenceNames">accessToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.authChallengeResponse.AuthenticationResult.AccessToken</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor testname="Extract ID Token">
            <stringProp name="JSONPostProcessor.referenceNames">idToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.authChallengeResponse.AuthenticationResult.IdToken</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Listener testname="Store Tokens" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="script">def at = vars.get('accessToken')
def it = vars.get('idToken')
props.put('ACCESS_TOKEN', at ?: '')
props.put('ID_TOKEN', it ?: '')</stringProp>
          </JSR223Listener>
          <hashTree/>
        </hashTree>
      </hashTree>

      <!-- Main Load Thread Group -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,200)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,600)}</stringProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,0)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(delay,0)}</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController">
          <stringProp name="LoopController.loops">${__P(loops,1)}</stringProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <!-- Modifier Update -->
        <HTTPSamplerProxy testname="HTTP Request - Modifier Update">
          <stringProp name="HTTPSampler.domain">${api_base_url}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">api/modifier/update</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <stringProp name="Argument.value">{
  "modifier": {
    "modifierName": "${randomModifierName}",
    "posDisplayName": "${randomModifierName}",
    "price": "0.00",
    "id": ${__P(modifier_id,103)},
    "restaurantId": ${__P(restaurant_id,3499)},
    "isOptional": true
  },
  "nestedModifiers": [],
  "restaurantId": ${__P(restaurant_id,3499)}
}</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager>
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(ACCESS_TOKEN,)}</stringProp>
              </elementProp>
              <elementProp name="x-id-token" elementType="Header">
                <stringProp name="Header.name">x-id-token</stringProp>
                <stringProp name="Header.value">${__P(ID_TOKEN,)}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <Arguments testname="Random Modifier Name">
            <collectionProp name="Arguments.arguments">
              <elementProp name="randomModifierName" elementType="Argument">
                <stringProp name="Argument.name">randomModifierName</stringProp>
                <stringProp name="Argument.value">Modifier${__Random(1,10000,)}</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>

        <!-- Restaurant Publish -->
        <HTTPSamplerProxy testname="HTTP Request - Restaurant Publish">
          <stringProp name="HTTPSampler.domain">${api_base_url}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">api/restaurant-publish/update-status</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <stringProp name="Argument.value">{
  "restaurantId": ${__P(restaurant_id,3499)},
  "isPublished": true,
  "businessId": ${__P(x_tenant_id,3401)}
}</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager>
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(ACCESS_TOKEN,)}</stringProp>
              </elementProp>
              <elementProp name="x-id-token" elementType="Header">
                <stringProp name="Header.name">x-id-token</stringProp>
                <stringProp name="Header.value">${__P(ID_TOKEN,)}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
